// Generated by gencpp from file arduino_msgs/RobotInfo.msg
// DO NOT EDIT!


#ifndef ARDUINO_MSGS_MESSAGE_ROBOTINFO_H
#define ARDUINO_MSGS_MESSAGE_ROBOTINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arduino_msgs
{
template <class ContainerAllocator>
struct RobotInfo_
{
  typedef RobotInfo_<ContainerAllocator> Type;

  RobotInfo_()
    : ultraSonic()
    , ir()
    , enconder()  {
    }
  RobotInfo_(const ContainerAllocator& _alloc)
    : ultraSonic(_alloc)
    , ir(_alloc)
    , enconder(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ultraSonic_type;
  _ultraSonic_type ultraSonic;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ir_type;
  _ir_type ir;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _enconder_type;
  _enconder_type enconder;





  typedef boost::shared_ptr< ::arduino_msgs::RobotInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arduino_msgs::RobotInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RobotInfo_

typedef ::arduino_msgs::RobotInfo_<std::allocator<void> > RobotInfo;

typedef boost::shared_ptr< ::arduino_msgs::RobotInfo > RobotInfoPtr;
typedef boost::shared_ptr< ::arduino_msgs::RobotInfo const> RobotInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arduino_msgs::RobotInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arduino_msgs::RobotInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arduino_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'arduino_msgs': ['/home/nvidia/catkin_ws/src/arduino_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arduino_msgs::RobotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino_msgs::RobotInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduino_msgs::RobotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduino_msgs::RobotInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_msgs::RobotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_msgs::RobotInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arduino_msgs::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a9cbc08a00a37b339035a0f6b3cd87f";
  }

  static const char* value(const ::arduino_msgs::RobotInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a9cbc08a00a37b3ULL;
  static const uint64_t static_value2 = 0x39035a0f6b3cd87fULL;
};

template<class ContainerAllocator>
struct DataType< ::arduino_msgs::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arduino_msgs/RobotInfo";
  }

  static const char* value(const ::arduino_msgs::RobotInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arduino_msgs::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] ultraSonic\n\
float32[] ir\n\
int32[] enconder\n\
";
  }

  static const char* value(const ::arduino_msgs::RobotInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arduino_msgs::RobotInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ultraSonic);
      stream.next(m.ir);
      stream.next(m.enconder);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arduino_msgs::RobotInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arduino_msgs::RobotInfo_<ContainerAllocator>& v)
  {
    s << indent << "ultraSonic[]" << std::endl;
    for (size_t i = 0; i < v.ultraSonic.size(); ++i)
    {
      s << indent << "  ultraSonic[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ultraSonic[i]);
    }
    s << indent << "ir[]" << std::endl;
    for (size_t i = 0; i < v.ir.size(); ++i)
    {
      s << indent << "  ir[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ir[i]);
    }
    s << indent << "enconder[]" << std::endl;
    for (size_t i = 0; i < v.enconder.size(); ++i)
    {
      s << indent << "  enconder[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.enconder[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDUINO_MSGS_MESSAGE_ROBOTINFO_H
